// <auto-generated />
using System;
using Academy.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Academy.Data.Migrations
{
    [DbContext(typeof(AcademyContext))]
    partial class AcademyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Academy.Domain.Models.Captcha.Captcha", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<int>("CaptchaType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SiteKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Captchas");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CaptchaType = 2,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            SecretKey = "o4berc6rqidu8zbd5uqs",
                            SiteKey = "hfz7j1jzqn",
                            Title = "ar captcha"
                        },
                        new
                        {
                            Id = (short)2,
                            CaptchaType = 0,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            SecretKey = "6LfhYIMqAAAAAMnSYhdAQQIQ0xfoT4jB0M3n4hjt",
                            SiteKey = "6LfhYIMqAAAAANG-u6hSXn78NNaHkh9YC0Dl8A9k",
                            Title = "google recaptcha 2"
                        },
                        new
                        {
                            Id = (short)3,
                            CaptchaType = 1,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            SecretKey = "6LdlYYMqAAAAAOBvpRDN6dYVJyF91VT91LZNi0Rk",
                            SiteKey = "6LdlYYMqAAAAAMZPw2mzADp3pSNynHA2UQ5svTWA",
                            Title = "google recaptcha 3"
                        });
                });

            modelBuilder.Entity("Academy.Domain.Models.Captcha.CaptchaSetting", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<int>("CaptchaSection")
                        .HasColumnType("int");

                    b.Property<int>("CaptchaType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CaptchaSettings");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CaptchaSection = 0,
                            CaptchaType = 1,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = (short)2,
                            CaptchaSection = 3,
                            CaptchaType = 1,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = (short)3,
                            CaptchaSection = 1,
                            CaptchaType = 1,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = (short)4,
                            CaptchaSection = 2,
                            CaptchaType = 1,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Academy.Domain.Models.Category.CourseCategory", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short?>("ParentId")
                        .HasMaxLength(10)
                        .HasColumnType("smallint");

                    b.Property<short>("Priority")
                        .HasMaxLength(10)
                        .HasColumnType("smallint");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("CourseCategories");
                });

            modelBuilder.Entity("Academy.Domain.Models.EmailSmtp.EmailSmtp", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EamilAddress")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("EmailSmtpType")
                        .HasColumnType("int");

                    b.Property<bool>("EnableSSL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("Port")
                        .HasColumnType("int");

                    b.Property<string>("SmtpAddress")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("EmailSmtps");
                });

            modelBuilder.Entity("Academy.Domain.Models.Permissions.Permission", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short?>("ParentId")
                        .HasColumnType("smallint");

                    b.Property<int>("RoleSection")
                        .HasColumnType("int");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "داشبورد ادمین",
                            IsDeleted = false,
                            RoleSection = 0,
                            UniqueName = "AdminDashboard"
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "پاک کردن cache سایت",
                            IsDeleted = false,
                            ParentId = (short)1,
                            RoleSection = 0,
                            UniqueName = "ClearCache"
                        });
                });

            modelBuilder.Entity("Academy.Domain.Models.Permissions.RolePermissionMapping", b =>
                {
                    b.Property<short>("PermissionId")
                        .HasColumnType("smallint");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionMappings");

                    b.HasData(
                        new
                        {
                            PermissionId = (short)1,
                            RoleId = (short)1
                        },
                        new
                        {
                            PermissionId = (short)2,
                            RoleId = (short)1
                        });
                });

            modelBuilder.Entity("Academy.Domain.Models.Roles.Role", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("RoleSection")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedDate = new DateTime(2025, 8, 6, 18, 11, 11, 521, DateTimeKind.Local).AddTicks(6578),
                            IsDeleted = false,
                            RoleName = "مدیر سیستم",
                            RoleSection = 0
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedDate = new DateTime(2025, 8, 6, 18, 11, 11, 521, DateTimeKind.Local).AddTicks(7003),
                            IsDeleted = false,
                            RoleName = "مدرس",
                            RoleSection = 1
                        });
                });

            modelBuilder.Entity("Academy.Domain.Models.Roles.UserRoleMapping", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleMappings");
                });

            modelBuilder.Entity("Academy.Domain.Models.SiteSettings.SiteSettings", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Copyright")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<short?>("DefaultMailServerSmtpId")
                        .HasColumnType("smallint");

                    b.Property<short?>("DefaultSimpleSmtpId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Favicon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultMailServerSmtpId");

                    b.HasIndex("DefaultSimpleSmtpId");

                    b.ToTable("SiteSettings");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Copyright = "تمامی حقوق مادی و معنوی این سایت متعلق به آکادمی می باشد و هرگونه کپی برداری غیرقانونی محسوب خواهد شد",
                            CreatedDate = new DateTime(2025, 8, 6, 18, 11, 11, 521, DateTimeKind.Local).AddTicks(4879),
                            Favicon = "favicon.ico",
                            IsDeleted = false,
                            Logo = "logo.png",
                            SiteName = "آکادمی"
                        });
                });

            modelBuilder.Entity("Academy.Domain.Models.SmsProvider.SmsProvider", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SmsProviderType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("SmsProviders");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            ApiKey = "16be6c43-2b7d-462f-8032-96b2472112c3",
                            CreatedDate = new DateTime(2025, 8, 6, 18, 11, 11, 520, DateTimeKind.Local).AddTicks(7657),
                            IsDeleted = false,
                            SmsProviderType = 0,
                            Title = "کاوه نگار"
                        },
                        new
                        {
                            Id = (short)2,
                            ApiKey = "36216de3-e60e-4fe6-9932-87cd79a12d0c",
                            CreatedDate = new DateTime(2025, 8, 6, 18, 11, 11, 520, DateTimeKind.Local).AddTicks(8128),
                            IsDeleted = false,
                            SmsProviderType = 1,
                            Title = "پارس  گرین"
                        });
                });

            modelBuilder.Entity("Academy.Domain.Models.SmsSetting.SmsSetting", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SmsProviderType")
                        .HasColumnType("int");

                    b.Property<int>("SmsSettingSection")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SmsSettings");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            SmsProviderType = 0,
                            SmsSettingSection = 0
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            SmsProviderType = 0,
                            SmsSettingSection = 1
                        },
                        new
                        {
                            Id = (short)3,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            SmsProviderType = 0,
                            SmsSettingSection = 2
                        },
                        new
                        {
                            Id = (short)4,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            SmsProviderType = 0,
                            SmsSettingSection = 3
                        },
                        new
                        {
                            Id = (short)5,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            SmsProviderType = 0,
                            SmsSettingSection = 4
                        },
                        new
                        {
                            Id = (short)6,
                            CreatedDate = new DateTime(2006, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            SmsProviderType = 0,
                            SmsSettingSection = 5
                        });
                });

            modelBuilder.Entity("Academy.Domain.Models.Ticket.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ReadBySupporter")
                        .HasColumnType("bit");

                    b.Property<bool>("ReadByUser")
                        .HasColumnType("bit");

                    b.Property<byte>("TicketPriority")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TicketSection")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TicketStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Academy.Domain.Models.Ticket.TicketMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("ReadBySupporter")
                        .HasColumnType("bit");

                    b.Property<bool>("ReadByUser")
                        .HasColumnType("bit");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketMessages");
                });

            modelBuilder.Entity("Academy.Domain.Models.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("ActiveCodeExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AvatarImageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("EmailActiveCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("EmailActiveCodeExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("GoogleAuthenticationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBannedFromComment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBannedFromTicket")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMobileActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MobileActiveCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("MobileActiveCodeExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Academy.Domain.Models.User.UserInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BirthCertificateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("BirthDate")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ReferralSource")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInformations");
                });

            modelBuilder.Entity("Academy.Domain.Models.Category.CourseCategory", b =>
                {
                    b.HasOne("Academy.Domain.Models.Category.CourseCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Academy.Domain.Models.Permissions.Permission", b =>
                {
                    b.HasOne("Academy.Domain.Models.Permissions.Permission", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Academy.Domain.Models.Permissions.RolePermissionMapping", b =>
                {
                    b.HasOne("Academy.Domain.Models.Permissions.Permission", "Permission")
                        .WithMany("RolePermissionMappings")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Academy.Domain.Models.Roles.Role", "Role")
                        .WithMany("RolePermissionMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Academy.Domain.Models.Roles.UserRoleMapping", b =>
                {
                    b.HasOne("Academy.Domain.Models.Roles.Role", "Role")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Academy.Domain.Models.User.User", "User")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Academy.Domain.Models.SiteSettings.SiteSettings", b =>
                {
                    b.HasOne("Academy.Domain.Models.EmailSmtp.EmailSmtp", "DefaultMailServerSmtp")
                        .WithMany("MailServerSmtpSiteSettings")
                        .HasForeignKey("DefaultMailServerSmtpId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Academy.Domain.Models.EmailSmtp.EmailSmtp", "DefaultSimpleSmtp")
                        .WithMany("SimpleSmtpSiteSettings")
                        .HasForeignKey("DefaultSimpleSmtpId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DefaultMailServerSmtp");

                    b.Navigation("DefaultSimpleSmtp");
                });

            modelBuilder.Entity("Academy.Domain.Models.Ticket.Ticket", b =>
                {
                    b.HasOne("Academy.Domain.Models.User.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Academy.Domain.Models.Ticket.TicketMessage", b =>
                {
                    b.HasOne("Academy.Domain.Models.User.User", "Sender")
                        .WithMany("TicketMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Academy.Domain.Models.Ticket.Ticket", "Ticket")
                        .WithMany("TicketMessages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Academy.Domain.Models.User.UserInformation", b =>
                {
                    b.HasOne("Academy.Domain.Models.User.User", "User")
                        .WithOne("UserInformation")
                        .HasForeignKey("Academy.Domain.Models.User.UserInformation", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Academy.Domain.Models.Category.CourseCategory", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Academy.Domain.Models.EmailSmtp.EmailSmtp", b =>
                {
                    b.Navigation("MailServerSmtpSiteSettings");

                    b.Navigation("SimpleSmtpSiteSettings");
                });

            modelBuilder.Entity("Academy.Domain.Models.Permissions.Permission", b =>
                {
                    b.Navigation("RolePermissionMappings");
                });

            modelBuilder.Entity("Academy.Domain.Models.Roles.Role", b =>
                {
                    b.Navigation("RolePermissionMappings");

                    b.Navigation("UserRoleMappings");
                });

            modelBuilder.Entity("Academy.Domain.Models.Ticket.Ticket", b =>
                {
                    b.Navigation("TicketMessages");
                });

            modelBuilder.Entity("Academy.Domain.Models.User.User", b =>
                {
                    b.Navigation("TicketMessages");

                    b.Navigation("Tickets");

                    b.Navigation("UserInformation");

                    b.Navigation("UserRoleMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
